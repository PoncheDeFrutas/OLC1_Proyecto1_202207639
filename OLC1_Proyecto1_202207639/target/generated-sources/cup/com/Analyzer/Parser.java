
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.Analyzer;

import java_cup.runtime.*;
import com.Classes.Tree;
import com.Classes.Error;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\004\003\000" +
    "\002\004\003\000\002\010\013\000\002\011\013\000\002" +
    "\012\005\000\002\012\003\000\002\012\003\000\002\013" +
    "\005\000\002\013\003\000\002\005\003\000\002\014\006" +
    "\000\002\014\010\000\002\006\005\000\002\022\007\000" +
    "\002\022\011\000\002\007\010\000\002\015\007\000\002" +
    "\016\004\000\002\016\003\000\002\017\011\000\002\017" +
    "\011\000\002\017\011\000\002\017\011\000\002\017\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\017\005\001\002\000\004\002\167\001" +
    "\002\000\016\021\013\022\007\024\023\025\015\026\017" +
    "\031\006\001\002\000\004\005\116\001\002\000\004\013" +
    "\106\001\002\000\020\020\ufffd\021\ufffd\022\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\031\ufffd\001\002\000\020\020\ufffa\021" +
    "\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\031\ufffa\001\002" +
    "\000\020\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\031\ufff0\001\002\000\004\013\076\001\002\000\020" +
    "\020\ufffe\021\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe\031" +
    "\ufffe\001\002\000\004\005\073\001\002\000\020\020\ufffb" +
    "\021\ufffb\022\ufffb\024\ufffb\025\ufffb\026\ufffb\031\ufffb\001" +
    "\002\000\004\014\042\001\002\000\020\020\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\025\ufff8\026\ufff8\031\ufff8\001\002\000" +
    "\020\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\031\ufff9\001\002\000\020\020\ufffc\021\ufffc\022\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\031\ufffc\001\002\000\004\005\030" +
    "\001\002\000\020\020\026\021\013\022\007\024\023\025" +
    "\015\026\017\031\006\001\002\000\020\020\uffff\021\uffff" +
    "\022\uffff\024\uffff\025\uffff\026\uffff\031\uffff\001\002\000" +
    "\004\017\027\001\002\000\004\002\000\001\002\000\016" +
    "\003\034\024\023\025\015\037\031\040\032\041\033\001" +
    "\002\000\012\006\uffe0\010\uffe0\011\uffe0\020\uffe0\001\002" +
    "\000\012\006\uffdf\010\uffdf\011\uffdf\020\uffdf\001\002\000" +
    "\012\006\uffde\010\uffde\011\uffde\020\uffde\001\002\000\012" +
    "\006\uffdd\010\uffdd\011\uffdd\020\uffdd\001\002\000\004\011" +
    "\037\001\002\000\012\006\uffe1\010\uffe1\011\uffe1\020\uffe1" +
    "\001\002\000\016\003\034\024\023\025\015\037\031\040" +
    "\032\041\033\001\002\000\004\006\041\001\002\000\026" +
    "\006\uffee\010\uffee\011\uffee\020\uffee\021\uffee\022\uffee\024" +
    "\uffee\025\uffee\026\uffee\031\uffee\001\002\000\006\027\044" +
    "\030\043\001\002\000\004\004\055\001\002\000\004\004" +
    "\046\001\002\000\020\020\uffed\021\uffed\022\uffed\024\uffed" +
    "\025\uffed\026\uffed\031\uffed\001\002\000\016\003\034\024" +
    "\023\025\015\037\031\040\032\041\033\001\002\000\010" +
    "\010\ufff1\011\ufff1\020\ufff1\001\002\000\006\011\051\020" +
    "\052\001\002\000\016\003\034\024\023\025\015\037\031" +
    "\040\032\041\033\001\002\000\004\012\053\001\002\000" +
    "\020\020\uffec\021\uffec\022\uffec\024\uffec\025\uffec\026\uffec" +
    "\031\uffec\001\002\000\010\010\ufff2\011\ufff2\020\ufff2\001" +
    "\002\000\010\003\061\037\056\041\060\001\002\000\006" +
    "\016\uffdc\020\uffdc\001\002\000\004\016\062\001\002\000" +
    "\006\016\uffdb\020\uffdb\001\002\000\006\016\uffda\020\uffda" +
    "\001\002\000\010\003\063\007\065\042\066\001\002\000" +
    "\006\006\ufff3\020\ufff3\001\002\000\004\020\071\001\002" +
    "\000\016\003\034\024\023\025\015\037\031\040\032\041" +
    "\033\001\002\000\006\006\ufff4\020\ufff4\001\002\000\006" +
    "\010\070\011\051\001\002\000\006\006\ufff5\020\ufff5\001" +
    "\002\000\004\012\072\001\002\000\020\020\uffeb\021\uffeb" +
    "\022\uffeb\024\uffeb\025\uffeb\026\uffeb\031\uffeb\001\002\000" +
    "\010\003\063\007\065\042\066\001\002\000\004\006\075" +
    "\001\002\000\026\006\uffef\010\uffef\011\uffef\020\uffef\021" +
    "\uffef\022\uffef\024\uffef\025\uffef\026\uffef\031\uffef\001\002" +
    "\000\004\023\077\001\002\000\004\014\100\001\002\000" +
    "\004\037\101\001\002\000\004\015\102\001\002\000\016" +
    "\003\034\024\023\025\015\037\031\040\032\041\033\001" +
    "\002\000\004\020\104\001\002\000\004\012\105\001\002" +
    "\000\020\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\031\ufff7\001\002\000\004\023\107\001\002\000\004" +
    "\014\110\001\002\000\004\042\111\001\002\000\004\015" +
    "\112\001\002\000\010\003\063\007\065\042\066\001\002" +
    "\000\004\020\114\001\002\000\004\012\115\001\002\000" +
    "\020\020\ufff6\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\031\ufff6\001\002\000\014\003\122\032\125\033\120\034" +
    "\117\035\121\001\002\000\004\014\161\001\002\000\004" +
    "\014\153\001\002\000\004\014\145\001\002\000\016\003" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\001\002" +
    "\000\004\006\142\001\002\000\016\003\122\032\125\033" +
    "\120\034\117\035\121\036\135\001\002\000\004\014\127" +
    "\001\002\000\016\003\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\001\002\000\004\023\130\001\002\000\004" +
    "\004\131\001\002\000\010\003\061\037\056\041\060\001" +
    "\002\000\004\020\133\001\002\000\004\012\134\001\002" +
    "\000\016\003\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\001\002\000\004\031\137\001\002\000\016\003\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002\000" +
    "\004\020\140\001\002\000\004\012\141\001\002\000\004" +
    "\006\uffe9\001\002\000\004\020\143\001\002\000\004\012" +
    "\144\001\002\000\020\020\uffea\021\uffea\022\uffea\024\uffea" +
    "\025\uffea\026\uffea\031\uffea\001\002\000\004\023\146\001" +
    "\002\000\004\004\147\001\002\000\010\003\063\007\065" +
    "\042\066\001\002\000\004\020\151\001\002\000\004\012" +
    "\152\001\002\000\016\003\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\001\002\000\004\023\154\001\002\000" +
    "\004\004\155\001\002\000\010\003\063\007\065\042\066" +
    "\001\002\000\004\020\157\001\002\000\004\012\160\001" +
    "\002\000\016\003\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\001\002\000\004\023\162\001\002\000\004\004" +
    "\163\001\002\000\010\003\063\007\065\042\066\001\002" +
    "\000\004\020\165\001\002\000\004\012\166\001\002\000" +
    "\016\003\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\002\003\001\001\000\002\001\001\000" +
    "\024\003\023\004\007\005\021\006\015\007\010\010\020" +
    "\011\017\014\011\023\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\007\005\021\006\015\007\010\010\020\011\017" +
    "\014\011\023\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\035\020\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\035\020\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\047\014\035\020" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\035\020\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\066\014\035\020\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\035\020\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\122\016\123\017\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public ArrayList<Error> TablaES = new ArrayList<Error>();
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexema = "NULL";
        if (s.value != null){
            lexema = s.value.toString();
        }
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        //Error(int id, int line, int column, String character, String errorType, String description)
        Error datos = new Error(TablaES.size()+1, columna, fila, lexema, "Error Sintactico", "Caracter no esperado");
        TablaES.add(datos);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = "NULL";
        if (s.value != null){
            lexema = s.value.toString();
        }
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        Error datos = new Error(TablaES.size()+1, columna, fila, lexema, "Error Sintactico", "Caracter no esperado");
        TablaES.add(datos);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree start_val = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= PROGRAM statments END PROGRAM 
            {
              Tree RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree st = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree SP = new Tree("SP", -1, -1);
    SP.addChild(new Tree("PROGRAM", -1, -1));
    try {
        SP.addChild(st);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    SP.addChild(new Tree("END", -1, -1));
    SP.addChild(new Tree("PROGRAM", -1, -1));
    RESULT = SP;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("start_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statments ::= statments type_declaration 
            {
              Tree RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree st = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree td = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree ST = new Tree("ST", -1, -1);
    try {
        ST.addChild(st);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    try {
        ST.addChild(td);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = ST;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statments ::= type_declaration 
            {
              Tree RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree td = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree ST = new Tree("ST", -1, -1);
    try {
        ST.addChild(td);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = ST;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_declaration ::= declaration 
            {
              Tree RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree d = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree TD = new Tree("TD", -1, -1);
    try {
        TD.addChild(d);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = TD;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_declaration ::= expression_statement 
            {
              Tree RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree es = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree TD = new Tree("TD", -1, -1);
    try {
        TD.addChild(es);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = TD;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type_declaration ::= console_statement 
            {
              Tree RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree cs = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree TD = new Tree("TD", -1, -1);
    try {
        TD.addChild(cs);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = TD;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_declaration ::= graph_statement 
            {
              Tree RESULT =null;
		int gsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree gs = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree TD = new Tree("TD", -1, -1);
    try {
        TD.addChild(gs);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = TD;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= variable_declaration 
            {
              Tree RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree vd = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree D = new Tree("D", -1, -1);
    try {
        D.addChild(vd);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = D;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= array_declaration 
            {
              Tree RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ad = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree D = new Tree("D", -1, -1);
    try {
        D.addChild(ad);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = D;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_declaration ::= VAR COLON DATATYPE DOUBLECOLON ID LARROW expression END SEMICOLON 
            {
              Tree RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree ex = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree VD = new Tree("VD", -1, -1);
    VD.addChild(new Tree("VAR", -1, -1));
    VD.addChild(new Tree(":", -1, -1));
    VD.addChild(new Tree(dt.toString(), dtleft, dtright));
    VD.addChild(new Tree("::", -1, -1));
    VD.addChild(new Tree(id.toString(), idleft, idright));
    VD.addChild(new Tree("<-", -1, -1));
    try {
        VD.addChild(ex);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    VD.addChild(new Tree("END", -1, -1));
    VD.addChild(new Tree(";", -1, -1));
    RESULT = VD;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // array_declaration ::= ARR COLON DATATYPE DOUBLECOLON ARRAY LARROW array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree AD = new Tree("AD", -1, -1);
    AD.addChild(new Tree("ARR", -1, -1));
    AD.addChild(new Tree(":", -1, -1));
    AD.addChild(new Tree(dt.toString(), dtleft, dtright));
    AD.addChild(new Tree("::", -1, -1));
    AD.addChild(new Tree(ar.toString(), arleft, arright));
    AD.addChild(new Tree("<-", -1, -1));
    try {
        AD.addChild(av);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    AD.addChild(new Tree("END", -1, -1));
    AD.addChild(new Tree(";", -1, -1));
    RESULT = AD;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // array_values ::= LBRACKET expression_list RBRACKET 
            {
              Tree RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree exl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Tree AV = new Tree("AV", -1, -1);
    AV.addChild(new Tree("[", -1, -1));
    try {
        AV.addChild(exl);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    AV.addChild(new Tree("]", -1, -1));
    RESULT = AV;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_values",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // array_values ::= ARRAY 
            {
              Tree RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree AV = new Tree("AV", -1, -1);
    AV.addChild(new Tree(ar.toString(), arleft, arright));
    RESULT = AV;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_values",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // array_values ::= error 
            {
              Tree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_values",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_list ::= expression_list COMMA expression 
            {
              Tree RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree exl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ex = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXL = new Tree("EXL", -1, -1);
    try {
        EXL.addChild(exl);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    EXL.addChild(new Tree(",", -1, -1));
    try {
        EXL.addChild(ex);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = EXL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_list ::= expression 
            {
              Tree RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ex = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXL = new Tree("EXL", -1, -1);
    try {
        EXL.addChild(ex);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = EXL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression_statement ::= function_call 
            {
              Tree RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree fc = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXS = new Tree("EXS", -1, -1);
    try {
        EXS.addChild(fc);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = EXS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_call ::= ESTFUNC LPAREN array_values RPAREN 
            {
              Tree RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Tree FC = new Tree("FC", -1, -1);
    FC.addChild(new Tree(ef.toString(), efleft, efright));
    FC.addChild(new Tree("(", -1, -1));
    try {
        FC.addChild(av);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    FC.addChild(new Tree(")", -1, -1));
    RESULT = FC;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_call ::= ARITFUNC LPAREN expression COMMA expression RPAREN 
            {
              Tree RESULT =null;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tree ex1 = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree ex2 = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Tree FC = new Tree("FC", -1, -1);
    FC.addChild(new Tree(af.toString(), afleft, afright));
    FC.addChild(new Tree("(", -1, -1));
    try {
        FC.addChild(ex1);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    FC.addChild(new Tree(",", -1, -1));
    try {
        FC.addChild(ex2);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    FC.addChild(new Tree(")", -1, -1));
    RESULT = FC;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // console_statement ::= CONSOLE DOUBLECOLON print_statement 
            {
              Tree RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ps = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree CS = new Tree("CS", -1, -1);
    CS.addChild(new Tree("CONSOLE", -1, -1));
    CS.addChild(new Tree("::", -1, -1));
    try {
        CS.addChild(ps);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = CS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // print_statement ::= PRINT EQUAL expression_list END SEMICOLON 
            {
              Tree RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree exl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree PS = new Tree("PS", -1, -1);
    PS.addChild(new Tree("PRINT", -1, -1));
    PS.addChild(new Tree("=", -1, -1));
    try {
        PS.addChild(exl);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    PS.addChild(new Tree("END", -1, -1));
    PS.addChild(new Tree(";", -1, -1));
    RESULT = PS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // print_statement ::= COLUMN EQUAL expression_char RARROW array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int excleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int excright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tree exc = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree PS = new Tree("PS", -1, -1);
    PS.addChild(new Tree("COLUMN", -1, -1));
    PS.addChild(new Tree("=", -1, -1));
    try {
        PS.addChild(exc);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    PS.addChild(new Tree("->", -1, -1));
    try {
        PS.addChild(av);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    PS.addChild(new Tree("END", -1, -1));
    PS.addChild(new Tree(";", -1, -1));
    RESULT = PS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // graph_statement ::= GRAPHTYPE LPAREN graph_parameters RPAREN END SEMICOLON 
            {
              Tree RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int gpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tree gp = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    Tree GS = new Tree("GS", -1, -1);
    GS.addChild(new Tree(gt.toString(), gtleft, gtright));
    GS.addChild(new Tree("(", -1, -1));
    try {
        GS.addChild(gp);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    GS.addChild(new Tree(")", -1, -1));
    GS.addChild(new Tree("END", -1, -1));
    GS.addChild(new Tree(";", -1, -1));
    RESULT = GS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graph_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // graph_parameters ::= parameter_list EXEC GRAPHTYPE END SEMICOLON 
            {
              Tree RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tree pl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree GP = new Tree("GP", -1, -1);
    try {
        GP.addChild(pl);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    GP.addChild(new Tree("EXEC", -1, -1));
    GP.addChild(new Tree(gt.toString(), gtleft, gtright));
    GP.addChild(new Tree("END", -1, -1));
    GP.addChild(new Tree(";", -1, -1));
    RESULT = GP;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graph_parameters",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameter_list ::= parameter_list parameter 
            {
              Tree RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree pl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree p = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree PL = new Tree("PL", -1, -1);
    try {
        PL.addChild(pl);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    try {
        PL.addChild(p);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = PL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter_list ::= parameter 
            {
              Tree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree p = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree PL = new Tree("PL", -1, -1);
    try {
        PL.addChild(p);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = PL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter ::= TITLE DOUBLECOLON DATATYPE EQUAL expression_char END SEMICOLON 
            {
              Tree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int excleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int excright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree exc = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree P = new Tree("P", -1, -1);
    P.addChild(new Tree(t.toString(), tleft, tright));
    P.addChild(new Tree("::", -1, -1));
    P.addChild(new Tree(dt.toString(), dtleft, dtright));
    P.addChild(new Tree("=", -1, -1));
    try {
        P.addChild(exc);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    P.addChild(new Tree("END", -1, -1));
    P.addChild(new Tree(";", -1, -1));
    RESULT = P;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter ::= EJES DOUBLECOLON DATATYPE EQUAL array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int ejleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int ejright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object ej = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree P = new Tree("P", -1, -1);
    P.addChild(new Tree(ej.toString(), ejleft, ejright));
    P.addChild(new Tree("::", -1, -1));
    P.addChild(new Tree(dt.toString(), dtleft, dtright));
    P.addChild(new Tree("=", -1, -1));
    try {
        P.addChild(av);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    P.addChild(new Tree("END", -1, -1));
    P.addChild(new Tree(";", -1, -1));
    RESULT = P;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter ::= VALUES DOUBLECOLON DATATYPE EQUAL array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree P = new Tree("P", -1, -1);
    P.addChild(new Tree("VALUES", -1, -1));
    P.addChild(new Tree("::", -1, -1));
    P.addChild(new Tree(dt.toString(), dtleft, dtright));
    P.addChild(new Tree("=", -1, -1));
    try {
        P.addChild(av);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    P.addChild(new Tree("END", -1, -1));
    P.addChild(new Tree(";", -1, -1));
    RESULT = P;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter ::= LABEL DOUBLECOLON DATATYPE EQUAL array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree P = new Tree("P", -1, -1);
    P.addChild(new Tree(l.toString(), lleft, lright));
    P.addChild(new Tree("::", -1, -1));
    P.addChild(new Tree(dt.toString(), dtleft, dtright));
    P.addChild(new Tree("=", -1, -1));
    try {
        P.addChild(av);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    P.addChild(new Tree("END", -1, -1));
    P.addChild(new Tree(";", -1, -1));
    RESULT = P;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter ::= error 
            {
              Tree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= function_call 
            {
              Tree RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree fc = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EX = new Tree("EX", -1, -1);
    try {
        EX.addChild(fc);
    } catch (Exception e) {
        RESULT= new Tree("ERR", -1, -1);
    }
    RESULT = EX;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= ID 
            {
              Tree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EX = new Tree("EX", -1, -1);
    EX.addChild(new Tree(id.toString(), idleft, idright));
    RESULT = EX;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= NUM 
            {
              Tree RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EX = new Tree("EX", -1, -1);
    EX.addChild(new Tree(num.toString(), numleft, numright));
    RESULT = EX;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= STRING 
            {
              Tree RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EX = new Tree("EX", -1, -1);
    EX.addChild(new Tree(str.toString(), strleft, strright));
    RESULT = EX;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= error 
            {
              Tree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression_char ::= ID 
            {
              Tree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXC = new Tree("EXC", -1, -1);
    EXC.addChild(new Tree(id.toString(), idleft, idright));
    RESULT = EXC;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression_char ::= STRING 
            {
              Tree RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXC = new Tree("EXC", -1, -1);
    EXC.addChild(new Tree(str.toString(), strleft, strright));
    RESULT = EXC;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression_char ::= error 
            {
              Tree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_char",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
