
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.Analyzer;

import java_cup.runtime.*;
import com.Classes.Tree;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\006\000\002\003" +
    "\002\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\003\000\002\004\003\000" +
    "\002\010\013\000\002\011\013\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\013\005\000\002\013" +
    "\003\000\002\005\003\000\002\014\006\000\002\014\010" +
    "\000\002\015\005\000\002\015\003\000\002\006\005\000" +
    "\002\023\007\000\002\023\011\000\002\007\010\000\002" +
    "\016\007\000\002\017\004\000\002\017\003\000\002\020" +
    "\011\000\002\020\011\000\002\020\011\000\002\020\011" +
    "\000\002\020\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\017\005\001\002\000\004\002\165\001" +
    "\002\000\020\020\uffff\021\uffff\022\uffff\024\uffff\025\uffff" +
    "\026\uffff\031\uffff\001\002\000\020\020\020\021\013\022" +
    "\010\024\024\025\015\026\017\031\007\001\002\000\004" +
    "\005\114\001\002\000\004\013\104\001\002\000\020\020" +
    "\ufffe\021\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe\031\ufffe" +
    "\001\002\000\020\020\ufffb\021\ufffb\022\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\031\ufffb\001\002\000\004\013\074\001\002" +
    "\000\020\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\031\ufff1\001\002\000\004\005\071\001\002\000\020" +
    "\020\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\026\ufffc\031" +
    "\ufffc\001\002\000\004\014\040\001\002\000\004\017\037" +
    "\001\002\000\020\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\031\ufffa\001\002\000\020\020\ufffd\021\ufffd" +
    "\022\ufffd\024\ufffd\025\ufffd\026\ufffd\031\ufffd\001\002\000" +
    "\020\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\031\ufff9\001\002\000\004\005\025\001\002\000\016\003" +
    "\031\024\024\025\015\037\026\040\027\041\030\001\002" +
    "\000\012\006\uffdf\010\uffdf\011\uffdf\020\uffdf\001\002\000" +
    "\012\006\uffde\010\uffde\011\uffde\020\uffde\001\002\000\012" +
    "\006\uffdd\010\uffdd\011\uffdd\020\uffdd\001\002\000\012\006" +
    "\uffdc\010\uffdc\011\uffdc\020\uffdc\001\002\000\004\011\034" +
    "\001\002\000\012\006\uffe0\010\uffe0\011\uffe0\020\uffe0\001" +
    "\002\000\016\003\031\024\024\025\015\037\026\040\027" +
    "\041\030\001\002\000\004\006\036\001\002\000\026\006" +
    "\uffef\010\uffef\011\uffef\020\uffef\021\uffef\022\uffef\024\uffef" +
    "\025\uffef\026\uffef\031\uffef\001\002\000\004\002\000\001" +
    "\002\000\006\027\041\030\042\001\002\000\004\004\065" +
    "\001\002\000\004\004\044\001\002\000\020\020\uffec\021" +
    "\uffec\022\uffec\024\uffec\025\uffec\026\uffec\031\uffec\001\002" +
    "\000\010\003\050\037\045\041\046\001\002\000\006\016" +
    "\uffdb\020\uffdb\001\002\000\006\016\uffda\020\uffda\001\002" +
    "\000\004\016\051\001\002\000\006\016\uffd9\020\uffd9\001" +
    "\002\000\010\003\052\007\054\042\055\001\002\000\006" +
    "\006\ufff4\020\ufff4\001\002\000\004\020\063\001\002\000" +
    "\016\003\031\024\024\025\015\037\026\040\027\041\030" +
    "\001\002\000\006\006\ufff5\020\ufff5\001\002\000\010\010" +
    "\ufff2\011\ufff2\020\ufff2\001\002\000\006\010\061\011\060" +
    "\001\002\000\016\003\031\024\024\025\015\037\026\040" +
    "\027\041\030\001\002\000\006\006\ufff6\020\ufff6\001\002" +
    "\000\010\010\ufff3\011\ufff3\020\ufff3\001\002\000\004\012" +
    "\064\001\002\000\020\020\uffea\021\uffea\022\uffea\024\uffea" +
    "\025\uffea\026\uffea\031\uffea\001\002\000\016\003\031\024" +
    "\024\025\015\037\026\040\027\041\030\001\002\000\006" +
    "\011\060\020\067\001\002\000\004\012\070\001\002\000" +
    "\020\020\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\031\uffeb\001\002\000\010\003\052\007\054\042\055\001" +
    "\002\000\004\006\073\001\002\000\026\006\ufff0\010\ufff0" +
    "\011\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\031\ufff0\001\002\000\004\023\075\001\002\000\004" +
    "\014\076\001\002\000\004\037\077\001\002\000\004\015" +
    "\100\001\002\000\016\003\031\024\024\025\015\037\026" +
    "\040\027\041\030\001\002\000\004\020\102\001\002\000" +
    "\004\012\103\001\002\000\020\020\ufff8\021\ufff8\022\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\031\ufff8\001\002\000\004\023" +
    "\105\001\002\000\004\014\106\001\002\000\004\042\107" +
    "\001\002\000\004\015\110\001\002\000\010\003\052\007" +
    "\054\042\055\001\002\000\004\020\112\001\002\000\004" +
    "\012\113\001\002\000\020\020\ufff7\021\ufff7\022\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\031\ufff7\001\002\000\014\003\117" +
    "\032\123\033\116\034\115\035\120\001\002\000\004\014" +
    "\157\001\002\000\004\014\151\001\002\000\016\003\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\001\002\000" +
    "\004\014\143\001\002\000\004\006\140\001\002\000\016" +
    "\003\117\032\123\033\116\034\115\035\120\036\133\001" +
    "\002\000\004\014\125\001\002\000\016\003\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\001\002\000\004\023" +
    "\126\001\002\000\004\004\127\001\002\000\010\003\050" +
    "\037\045\041\046\001\002\000\004\020\131\001\002\000" +
    "\004\012\132\001\002\000\016\003\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\001\002\000\004\031\135\001" +
    "\002\000\016\003\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\001\002\000\004\020\136\001\002\000\004\012" +
    "\137\001\002\000\004\006\uffe8\001\002\000\004\020\141" +
    "\001\002\000\004\012\142\001\002\000\020\020\uffe9\021" +
    "\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\031\uffe9\001\002" +
    "\000\004\023\144\001\002\000\004\004\145\001\002\000" +
    "\010\003\052\007\054\042\055\001\002\000\004\020\147" +
    "\001\002\000\004\012\150\001\002\000\016\003\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\001\002\000\004" +
    "\023\152\001\002\000\004\004\153\001\002\000\010\003" +
    "\052\007\054\042\055\001\002\000\004\020\155\001\002" +
    "\000\004\012\156\001\002\000\016\003\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\001\002\000\004\023\160" +
    "\001\002\000\004\004\161\001\002\000\010\003\052\007" +
    "\054\042\055\001\002\000\004\020\163\001\002\000\004" +
    "\012\164\001\002\000\016\003\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\020\004\010\005\021\006\015" +
    "\007\011\010\020\011\022\014\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\032\021\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\032\021\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\056\014\032\021\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\032\021\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\065\014\032\021\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\032\021\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\120\017\121\020\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol s){
	System.out.println("Sintax error: " +s.value + " en la línea " + s.right+ " en la columna " + s.left);
}

public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
	System.out.println("Sintax error: " +s.value + " en la línea " + s.right+" en la columna " + s.left);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree start_val = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= PROGRAM statments END PROGRAM 
            {
              Tree RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree st = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree SP = new Tree("SP");
    SP.addChild(new Tree("PROGRAM"));
    SP.addChild(st);
    SP.addChild(new Tree("END"));
    SP.addChild(new Tree("PROGRAM"));
    RESULT = SP;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("start_program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statments ::= 
            {
              Tree RESULT =null;
		RESULT = new Tree("");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statments ::= statments declaration 
            {
              Tree RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree st = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree d = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree ST = new Tree("ST");
        ST.addChild(st);
        ST.addChild(d);
        RESULT = ST;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statments ::= statments expression_statement 
            {
              Tree RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree st = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree es = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree ST = new Tree("ST");
        ST.addChild(st);
        ST.addChild(es);
        RESULT = ST;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statments ::= statments console_statement 
            {
              Tree RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree st = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree cs = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree ST = new Tree("ST");
        ST.addChild(st);
        ST.addChild(cs);
        RESULT = ST;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statments ::= statments graph_statement 
            {
              Tree RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree st = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int gsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree gs = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree ST = new Tree("ST");
        ST.addChild(st);
        ST.addChild(gs);
        RESULT = ST;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statments",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= variable_declaration 
            {
              Tree RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree vd = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree D = new Tree("D");
    D.addChild(vd);
    RESULT = D;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= array_declaration 
            {
              Tree RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ad = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree D = new Tree("D");
    D.addChild(ad);
    RESULT = D;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_declaration ::= VAR COLON DATATYPE DOUBLECOLON ID LARROW expression END SEMICOLON 
            {
              Tree RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree ex = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree VD = new Tree("VD");
    VD.addChild(new Tree("VAR"));
    VD.addChild(new Tree(":"));
    VD.addChild(new Tree(dt.toString()));
    VD.addChild(new Tree("::"));
    VD.addChild(new Tree(id.toString()));
    VD.addChild(new Tree("<-"));
    VD.addChild(ex);
    VD.addChild(new Tree("END"));
    VD.addChild(new Tree(";"));
    RESULT = VD;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // array_declaration ::= ARR COLON DATATYPE DOUBLECOLON ARRAY LARROW array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree AD = new Tree("AD");
    AD.addChild(new Tree("ARR"));
    AD.addChild(new Tree(":"));
    AD.addChild(new Tree(dt.toString()));
    AD.addChild(new Tree("::"));
    AD.addChild(new Tree(ar.toString()));
    AD.addChild(new Tree("<-"));
    AD.addChild(av);
    AD.addChild(new Tree("END"));
    AD.addChild(new Tree(";"));
    RESULT = AD;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // array_values ::= LBRACKET expression_list RBRACKET 
            {
              Tree RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree exl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Tree AV = new Tree("AV");
    AV.addChild(new Tree("["));
    AV.addChild(exl);
    AV.addChild(new Tree("]"));
    RESULT = AV;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_values",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // array_values ::= ARRAY 
            {
              Tree RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree AV = new Tree("AV");
    AV.addChild(new Tree(ar.toString()));
    RESULT = AV;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_values",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // array_values ::= error 
            {
              Tree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_values",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression_list ::= expression_list COMMA expression 
            {
              Tree RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree exl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ex = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXL = new Tree("EXL");
    EXL.addChild(exl);
    EXL.addChild(new Tree(","));
    EXL.addChild(ex);
    RESULT = EXL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_list ::= expression 
            {
              Tree RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ex = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXL = new Tree("EXL");
    EXL.addChild(ex);
    RESULT = EXL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_statement ::= function_call 
            {
              Tree RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree fc = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXS = new Tree("EXS");
    EXS.addChild(fc);
    RESULT = EXS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_call ::= ESTFUNC LPAREN array_values RPAREN 
            {
              Tree RESULT =null;
		int efleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int efright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Tree FC = new Tree("FC");
    FC.addChild(new Tree(ef.toString()));
    FC.addChild(new Tree("("));
    FC.addChild(av);
    FC.addChild(new Tree(")"));
    RESULT = FC;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_call ::= ARITFUNC LPAREN expression COMMA expression RPAREN 
            {
              Tree RESULT =null;
		int afleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int afright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tree ex1 = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree ex2 = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    Tree FC = new Tree("FC");
    FC.addChild(new Tree(af.toString()));
    FC.addChild(new Tree("("));
    FC.addChild(ex1);
    FC.addChild(new Tree(","));
    FC.addChild(ex2);
    FC.addChild(new Tree(")"));
    RESULT = FC;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argument_list ::= argument_list COMMA expression 
            {
              Tree RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree al = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ex = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree AL = new Tree("AL");
    AL.addChild(al);
    AL.addChild(new Tree(","));
    AL.addChild(ex);
    RESULT = AL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argument_list ::= expression 
            {
              Tree RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ex = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree AL = new Tree("AL");
    AL.addChild(ex);
    RESULT = AL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // console_statement ::= CONSOLE DOUBLECOLON print_statement 
            {
              Tree RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree ps = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree CS = new Tree("CS");
    CS.addChild(new Tree("CONSOLE"));
    CS.addChild(new Tree("::"));
    CS.addChild(ps);
    RESULT = CS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("console_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // print_statement ::= PRINT EQUAL expression_list END SEMICOLON 
            {
              Tree RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree exl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree PS = new Tree("PS");
    PS.addChild(new Tree("PRINT"));
    PS.addChild(new Tree("="));
    PS.addChild(exl);
    PS.addChild(new Tree("END"));
    PS.addChild(new Tree(";"));
    RESULT = PS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // print_statement ::= COLUMN EQUAL expression_char RARROW array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int excleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int excright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tree exc = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree PS = new Tree("PS");
    PS.addChild(new Tree("COLUMN"));
    PS.addChild(new Tree("="));
    PS.addChild(exc);
    PS.addChild(new Tree("->"));
    PS.addChild(av);
    PS.addChild(new Tree("END"));
    PS.addChild(new Tree(";"));
    RESULT = PS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // graph_statement ::= GRAPHTYPE LPAREN graph_parameters RPAREN END SEMICOLON 
            {
              Tree RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int gpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int gpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tree gp = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    Tree GS = new Tree("GS");
    GS.addChild(new Tree(gt.toString()));
    GS.addChild(new Tree("("));
    GS.addChild(gp);
    GS.addChild(new Tree(")"));
    GS.addChild(new Tree("END"));
    GS.addChild(new Tree(";"));
    RESULT = GS;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graph_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // graph_parameters ::= parameter_list EXEC GRAPHTYPE END SEMICOLON 
            {
              Tree RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tree pl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree GP = new Tree("GP");
    GP.addChild(pl);
    GP.addChild(new Tree("EXEC"));
    GP.addChild(new Tree(gt.toString()));
    GP.addChild(new Tree("END"));
    GP.addChild(new Tree(";"));
    RESULT = GP;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graph_parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameter_list ::= parameter_list parameter 
            {
              Tree RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tree pl = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree p = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree PL = new Tree("PL");
    PL.addChild(pl);
    PL.addChild(p);
    RESULT = PL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameter_list ::= parameter 
            {
              Tree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree p = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree PL = new Tree("PL");
    PL.addChild(p);
    RESULT = PL;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameter ::= TITLE DOUBLECOLON DATATYPE EQUAL expression_char END SEMICOLON 
            {
              Tree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int excleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int excright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree exc = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree P = new Tree("P");
    P.addChild(new Tree(t.toString()));
    P.addChild(new Tree("::"));
    P.addChild(new Tree(dt.toString()));
    P.addChild(new Tree("="));
    P.addChild(exc);
    P.addChild(new Tree("END"));
    P.addChild(new Tree(";"));
    RESULT = P;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameter ::= EJES DOUBLECOLON DATATYPE EQUAL array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree P = new Tree("P");
    P.addChild(new Tree(e.toString()));
    P.addChild(new Tree("::"));
    P.addChild(new Tree(dt.toString()));
    P.addChild(new Tree("="));
    P.addChild(av);
    P.addChild(new Tree("END"));
    P.addChild(new Tree(";"));
    RESULT = P;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameter ::= VALUES DOUBLECOLON DATATYPE EQUAL array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree P = new Tree("P");
    P.addChild(new Tree("VALUES"));
    P.addChild(new Tree("::"));
    P.addChild(new Tree(dt.toString()));
    P.addChild(new Tree("="));
    P.addChild(av);
    P.addChild(new Tree("END"));
    P.addChild(new Tree(";"));
    RESULT = P;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter ::= LABEL DOUBLECOLON DATATYPE EQUAL array_values END SEMICOLON 
            {
              Tree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tree av = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    Tree P = new Tree("P");
    P.addChild(new Tree(l.toString()));
    P.addChild(new Tree("::"));
    P.addChild(new Tree(dt.toString()));
    P.addChild(new Tree("="));
    P.addChild(av);
    P.addChild(new Tree("END"));
    P.addChild(new Tree(";"));
    RESULT = P;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter ::= error 
            {
              Tree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= function_call 
            {
              Tree RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tree fc = (Tree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EX = new Tree("EX");
    EX.addChild(fc);
    RESULT = EX;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= ID 
            {
              Tree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EX = new Tree("EX");
    EX.addChild(new Tree(id.toString()));
    RESULT = EX;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= NUM 
            {
              Tree RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EX = new Tree("EX");
    EX.addChild(new Tree(num.toString()));
    RESULT = EX;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= STRING 
            {
              Tree RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EX = new Tree("EX");
    EX.addChild(new Tree(str.toString()));
    RESULT = EX;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= error 
            {
              Tree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression_char ::= ID 
            {
              Tree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXC = new Tree("EXC");
    EXC.addChild(new Tree(id.toString()));
    RESULT = EXC;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression_char ::= STRING 
            {
              Tree RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Tree EXC = new Tree("EXC");
    EXC.addChild(new Tree(str.toString()));
    RESULT = EXC;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression_char ::= error 
            {
              Tree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_char",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
