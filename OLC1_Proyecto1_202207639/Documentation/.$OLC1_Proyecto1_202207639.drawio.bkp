<mxGraphModel dx="0" dy="0" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" background="none" math="0" shadow="0">
  <root>
    <mxCell id="0" />
    <mxCell id="1" parent="0" />
    <mxCell id="node15" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;AppTest&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ AppTest(): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ testGraphs(): void&lt;br/&gt;+ testLexemeAnalyzer(): void&lt;br/&gt;+ testSintacticAnalyzer(): void&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="547" y="4414" width="220" height="144" as="geometry" />
    </mxCell>
    <mxCell id="node16" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Base_JPanel&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Base_JPanel(String, String): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- codeTextArea: String&lt;br/&gt;- jLabel3: JLabel&lt;br/&gt;- last: int&lt;br/&gt;- jLabel2: JLabel&lt;br/&gt;- combinedGraphs: CombinedGraphs&lt;br/&gt;- jButtonafter: JButton&lt;br/&gt;- jScrollPane1: JScrollPane&lt;br/&gt;- jPanelGraph: JPanel&lt;br/&gt;- jTextArea_Console: JTextArea&lt;br/&gt;- jButtonbefore: JButton&lt;br/&gt;- jTextArea_codeArea: JTextArea&lt;br/&gt;- jLabel1: JLabel&lt;br/&gt;- jScrollPane2: JScrollPane&lt;br/&gt;- filePath: String&lt;br/&gt;- numbers: Num_Line_Text_Area&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- jButtonafterMousePressed(MouseEvent): void&lt;br/&gt;+ setConsoleText(String): void&lt;br/&gt;+ returnTextAreaCode(): String&lt;br/&gt;- initComponents(): void&lt;br/&gt;+ setGraphs(CombinedGraphs): void&lt;br/&gt;- jButtonbeforeMousePressed(MouseEvent): void&lt;br/&gt;+ graphGraph(): void&lt;br/&gt;+ returnFilePath(): String&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="54" y="1737" width="348" height="595" as="geometry" />
    </mxCell>
    <mxCell id="node5" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;CombinedGraphs&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ CombinedGraphs(): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- chartPanels: ArrayList&amp;lt;ChartPanel&amp;gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ createBarGraph(String, ArrayList&amp;lt;String&amp;gt;, ArrayList&amp;lt;Float&amp;gt;, String, String): ChartPanel&lt;br/&gt;+ createPieGraph(String, ArrayList&amp;lt;String&amp;gt;, ArrayList&amp;lt;Float&amp;gt;): ChartPanel&lt;br/&gt;+ getChartPanels(): ArrayList&amp;lt;ChartPanel&amp;gt;&lt;br/&gt;+ createFrequencyBarGraph(String, ArrayList&amp;lt;Float&amp;gt;): ChartPanel&lt;br/&gt;+ createLineGraph(String, ArrayList&amp;lt;String&amp;gt;, ArrayList&amp;lt;Float&amp;gt;, String, String): ChartPanel&lt;br/&gt;+ addChartPanel(ChartPanel): void&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="423" y="4048" width="494" height="227" as="geometry" />
    </mxCell>
    <mxCell id="node14" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Error&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Error(int, int, int, String, String, String): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- Description: String&lt;br/&gt;- id: int&lt;br/&gt;- character: String&lt;br/&gt;- line: int&lt;br/&gt;- column: int&lt;br/&gt;- ErrorType: String&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ getCharacter(): String&lt;br/&gt;+ getLine(): int&lt;br/&gt;+ toString(): String&lt;br/&gt;+ setColumn(int): void&lt;br/&gt;+ getDescription(): String&lt;br/&gt;+ setLine(int): void&lt;br/&gt;+ setCharacter(String): void&lt;br/&gt;+ setErrorType(String): void&lt;br/&gt;+ getId(): int&lt;br/&gt;+ setId(int): void&lt;br/&gt;+ getColumn(): int&lt;br/&gt;+ getErrorType(): String&lt;br/&gt;+ setDescription(String): void&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="157" y="1174" width="292" height="503" as="geometry" />
    </mxCell>
    <mxCell id="node12" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Interpreter&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Interpreter(Tree): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- ARITFUNC: List&amp;lt;String&amp;gt;&lt;br/&gt;- Instruccions: ArrayList&amp;lt;Intruccions&amp;gt;&lt;br/&gt;- hash: HashMap&amp;lt;String, Simbols&amp;gt;&lt;br/&gt;- console_text: String&lt;br/&gt;- ESTAFUNC: List&amp;lt;String&amp;gt;&lt;br/&gt;- combinedGraphs: CombinedGraphs&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ declareArray(): void&lt;br/&gt;+ estaFunctions(String): float&lt;br/&gt;+ getHash(): HashMap&amp;lt;String, Simbols&amp;gt;&lt;br/&gt;+ getConsole_text(): String&lt;br/&gt;+ varianza(ArrayList&amp;lt;Float&amp;gt;): float&lt;br/&gt;+ isParsableToFloat(String): boolean&lt;br/&gt;+ max(ArrayList&amp;lt;Float&amp;gt;): float&lt;br/&gt;+ declareVariable(): void&lt;br/&gt;+ min(ArrayList&amp;lt;Float&amp;gt;): float&lt;br/&gt;- getFloatValue(): float&lt;br/&gt;+ graphGraphBL(String): void&lt;br/&gt;+ run(): void&lt;br/&gt;+ mediana(ArrayList&amp;lt;Float&amp;gt;): float&lt;br/&gt;+ aritFunctions(String): float&lt;br/&gt;+ printHash(): void&lt;br/&gt;+ media(ArrayList&amp;lt;Float&amp;gt;): float&lt;br/&gt;+ moda(ArrayList&amp;lt;Float&amp;gt;): float&lt;br/&gt;+ getCombinedGraphs(): CombinedGraphs&lt;br/&gt;+ createFrequencyTable(ArrayList&amp;lt;Float&amp;gt;): String&lt;br/&gt;+ printConsole(): void&lt;br/&gt;+ graphPH(String): void&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-103" y="2425" width="344" height="687" as="geometry" />
    </mxCell>
    <mxCell id="node0" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Intruccions&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Intruccions(int, int, String): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- line: int&lt;br/&gt;- column: int&lt;br/&gt;- lexeme: String&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ setColumn(int): void&lt;br/&gt;+ setLine(int): void&lt;br/&gt;+ getLexeme(): String&lt;br/&gt;+ getLine(): int&lt;br/&gt;+ getColumn(): int&lt;br/&gt;+ setLexeme(String): void&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="606" y="1602" width="216" height="273" as="geometry" />
    </mxCell>
    <mxCell id="node8" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;LexemeAnalyzer&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ LexemeAnalyzer(Reader): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- zzLexicalState: int&lt;br/&gt;- zzBuffer: char[]&lt;br/&gt;- ZZ_TRANS: int[]&lt;br/&gt;- ZZ_ERROR_MSG: String[]&lt;br/&gt;- zzFinalHighSurrogate: int&lt;br/&gt;- yychar: long&lt;br/&gt;- zzReader: Reader&lt;br/&gt;- ZZ_UNKNOWN_ERROR: int&lt;br/&gt;- ZZ_CMAP_TOP: int[]&lt;br/&gt;- ZZ_CMAP_TOP_PACKED_0: String&lt;br/&gt;- zzMarkedPos: int&lt;br/&gt;- ZZ_LEXSTATE: int[]&lt;br/&gt;- ZZ_ROWMAP: int[]&lt;br/&gt;- ZZ_ATTRIBUTE: int[]&lt;br/&gt;- ZZ_TRANS_PACKED_0: String&lt;br/&gt;- ZZ_ATTRIBUTE_PACKED_0: String&lt;br/&gt;- ZZ_ACTION: int[]&lt;br/&gt;- zzCurrentPos: int&lt;br/&gt;~ buffer: StringBuffer&lt;br/&gt;- yycolumn: int&lt;br/&gt;- ZZ_CMAP_BLOCKS_PACKED_0: String&lt;br/&gt;- zzEndRead: int&lt;br/&gt;+ YYINITIAL: int&lt;br/&gt;+ tokens: ArrayList&amp;lt;Token&amp;gt;&lt;br/&gt;- yyline: int&lt;br/&gt;- ZZ_ACTION_PACKED_0: String&lt;br/&gt;- zzState: int&lt;br/&gt;- zzAtEOF: boolean&lt;br/&gt;- ZZ_BUFFERSIZE: int&lt;br/&gt;+ YYEOF: int&lt;br/&gt;- ZZ_ROWMAP_PACKED_0: String&lt;br/&gt;- zzStartRead: int&lt;br/&gt;- zzAtBOL: boolean&lt;br/&gt;- ZZ_CMAP_BLOCKS: int[]&lt;br/&gt;- ZZ_NO_MATCH: int&lt;br/&gt;- ZZ_PUSHBACK_2BIG: int&lt;br/&gt;- zzEOFDone: boolean&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ yytext(): String&lt;br/&gt;+ yypushback(int): void&lt;br/&gt;+ next_token(): Token&lt;br/&gt;- zzUnpackAttribute(): int[]&lt;br/&gt;+ yystate(): int&lt;br/&gt;- zzRefill(): boolean&lt;br/&gt;+ yylength(): int&lt;br/&gt;+ yycharat(int): char&lt;br/&gt;- zzUnpacktrans(String, int, int[]): int&lt;br/&gt;- yyResetPosition(): void&lt;br/&gt;- zzCMap(int): int&lt;br/&gt;- zzScanError(int): void&lt;br/&gt;- zzUnpackAttribute(String, int, int[]): int&lt;br/&gt;+ yyreset(Reader): void&lt;br/&gt;+ yybegin(int): void&lt;br/&gt;- zzMaxBufferLen(): int&lt;br/&gt;- zzUnpackRowMap(): int[]&lt;br/&gt;- zzUnpackcmap_top(): int[]&lt;br/&gt;- zzUnpackAction(String, int, int[]): int&lt;br/&gt;- zzUnpackAction(): int[]&lt;br/&gt;+ yyatEOF(): boolean&lt;br/&gt;- zzUnpackcmap_top(String, int, int[]): int&lt;br/&gt;+ yyclose(): void&lt;br/&gt;- zzUnpackRowMap(String, int, int[]): int&lt;br/&gt;- zzUnpackcmap_blocks(String, int, int[]): int&lt;br/&gt;- zzCanGrow(): boolean&lt;br/&gt;- zzUnpacktrans(): int[]&lt;br/&gt;- zzUnpackcmap_blocks(): int[]&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="50" y="4098" width="313" height="1561" as="geometry" />
    </mxCell>
    <mxCell id="node7" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Main_JFrame&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Main_JFrame(): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- jMenu_Run: JMenu&lt;br/&gt;- jMenuItem_SaveFile: JMenuItem&lt;br/&gt;- jMenuBar1: JMenuBar&lt;br/&gt;- jMenu_Tabs: JMenu&lt;br/&gt;- jMenuItem_CloseFile: JMenuItem&lt;br/&gt;- jTabbedPane1: JTabbedPane&lt;br/&gt;- jMenuItem3_SymbolTable: JMenuItem&lt;br/&gt;- jMenu_Reports: JMenu&lt;br/&gt;- jMenuItem_NewFile: JMenuItem&lt;br/&gt;- jMenuItem_TokensReport: JMenuItem&lt;br/&gt;- jMenuItem_OpenFile: JMenuItem&lt;br/&gt;- jMenuItem2_ErrorsReport: JMenuItem&lt;br/&gt;- jMenu_File_CloseFile: JMenu&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- jMenuItem_OpenFileMouseReleased(MouseEvent): void&lt;br/&gt;- jMenu_RunMousePressed(MouseEvent): void&lt;br/&gt;- jMenuItem_SaveFileMouseReleased(MouseEvent): void&lt;br/&gt;- initComponents(): void&lt;br/&gt;- jMenuItem_NewFileMouseReleased(MouseEvent): void&lt;br/&gt;- jMenuItem_TokensReportMouseReleased(MouseEvent): void&lt;br/&gt;- jMenuItem3_SymbolTableMouseReleased(MouseEvent): void&lt;br/&gt;+ main(String[]): void&lt;br/&gt;- jMenuItem2_ErrorsReportMouseReleased(MouseEvent): void&lt;br/&gt;- jMenuItem_CloseFileMouseReleased(MouseEvent): void&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="462" y="2280" width="427" height="595" as="geometry" />
    </mxCell>
    <mxCell id="node11" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Num_Line_Text_Area&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Num_Line_Text_Area(JTextComponent, int): &lt;br/&gt;+ Num_Line_Text_Area(JTextComponent): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- HEIGHT: int&lt;br/&gt;- lastDigits: int&lt;br/&gt;- component: JTextComponent&lt;br/&gt;- lastHeight: int&lt;br/&gt;- minimumDisplayDigits: int&lt;br/&gt;- borderGap: int&lt;br/&gt;- currentLineForeground: Color&lt;br/&gt;- digitAlignment: float&lt;br/&gt;+ LEFT: float&lt;br/&gt;- fonts: HashMap&amp;lt;String, FontMetrics&amp;gt;&lt;br/&gt;- updateFont: boolean&lt;br/&gt;- color1: Color&lt;br/&gt;- OUTER: Border&lt;br/&gt;+ CENTER: float&lt;br/&gt;+ RIGHT: float&lt;br/&gt;- lastLine: int&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ getCurrentLineForeground(): Color&lt;br/&gt;+ setMinimumDisplayDigits(int): void&lt;br/&gt;+ setUpdateFont(boolean): void&lt;br/&gt;- isCurrentLine(int): boolean&lt;br/&gt;# getTextLineNumber(int): String&lt;br/&gt;+ insertUpdate(DocumentEvent): void&lt;br/&gt;- getOffsetX(int, int): int&lt;br/&gt;- getOffsetY(int, FontMetrics): int&lt;br/&gt;+ setCurrentLineForeground(Color): void&lt;br/&gt;+ caretUpdate(CaretEvent): void&lt;br/&gt;+ changedUpdate(DocumentEvent): void&lt;br/&gt;+ getDigitAlignment(): float&lt;br/&gt;+ paintComponent(Graphics): void&lt;br/&gt;+ getUpdateFont(): boolean&lt;br/&gt;+ propertyChange(PropertyChangeEvent): void&lt;br/&gt;+ getBorderGap(): int&lt;br/&gt;+ setDigitAlignment(float): void&lt;br/&gt;- setPreferredWidth(): void&lt;br/&gt;- documentChanged(): void&lt;br/&gt;+ removeUpdate(DocumentEvent): void&lt;br/&gt;+ getMinimumDisplayDigits(): int&lt;br/&gt;+ setBorderGap(int): void&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="850" y="4564" width="328" height="963" as="geometry" />
    </mxCell>
    <mxCell id="node1" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Parser&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Parser(): &lt;br/&gt;+ Parser(Scanner): &lt;br/&gt;+ Parser(Scanner, SymbolFactory): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;# action_obj: CUP$Parser$actions&lt;br/&gt;# _production_table: short[][]&lt;br/&gt;+ resultado: String&lt;br/&gt;+ TablaES: ArrayList&amp;lt;Error&amp;gt;&lt;br/&gt;# _action_table: short[][]&lt;br/&gt;# _reduce_table: short[][]&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ production_table(): short[][]&lt;br/&gt;+ syntax_error(Symbol): void&lt;br/&gt;+ EOF_sym(): int&lt;br/&gt;+ error_sym(): int&lt;br/&gt;+ unrecovered_syntax_error(Symbol): void&lt;br/&gt;+ addError(int, int, String): void&lt;br/&gt;+ start_state(): int&lt;br/&gt;+ start_production(): int&lt;br/&gt;+ getSymbolContainer(): Class&lt;br/&gt;+ action_table(): short[][]&lt;br/&gt;+ reduce_table(): short[][]&lt;br/&gt;# init_actions(): void&lt;br/&gt;+ do_action(int, lr_parser, Stack, int): Symbol&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="970" y="2646" width="311" height="549" as="geometry" />
    </mxCell>
    <mxCell id="node6" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;i&gt;&amp;lt;&amp;lt;interface&amp;gt;&amp;gt;&lt;/i&gt;&lt;br/&gt;&lt;b&gt;ParserSym&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ RBRACKET: int&lt;br/&gt;+ NUM: int&lt;br/&gt;+ COMMA: int&lt;br/&gt;+ EXEC: int&lt;br/&gt;+ VALUES: int&lt;br/&gt;+ LBRACKET: int&lt;br/&gt;+ TITLE: int&lt;br/&gt;+ terminalNames: String[]&lt;br/&gt;+ ARR: int&lt;br/&gt;+ RPAREN: int&lt;br/&gt;+ GRAPHTYPE: int&lt;br/&gt;+ EOF: int&lt;br/&gt;+ RARROW: int&lt;br/&gt;+ ARITFUNC: int&lt;br/&gt;+ LARROW: int&lt;br/&gt;+ END: int&lt;br/&gt;+ COLON: int&lt;br/&gt;+ PRINT: int&lt;br/&gt;+ DATATYPE: int&lt;br/&gt;+ COLUMN: int&lt;br/&gt;+ LPAREN: int&lt;br/&gt;+ VAR: int&lt;br/&gt;+ LABEL: int&lt;br/&gt;+ ID: int&lt;br/&gt;+ ARRAY: int&lt;br/&gt;+ DOUBLECOLON: int&lt;br/&gt;+ SEMICOLON: int&lt;br/&gt;+ CONSOLE: int&lt;br/&gt;+ ESTFUNC: int&lt;br/&gt;+ PROGRAM: int&lt;br/&gt;+ STRING: int&lt;br/&gt;+ EQUAL: int&lt;br/&gt;+ error: int&lt;br/&gt;+ EJES: int&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="410" y="-14" width="192" height="821" as="geometry" />
    </mxCell>
    <mxCell id="node13" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Reports&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Reports(): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- errors: ArrayList&amp;lt;Error&amp;gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ simbolTable(HashMap&amp;lt;String, Simbols&amp;gt;): boolean&lt;br/&gt;+ tokensReport(ArrayList&amp;lt;Token&amp;gt;): boolean&lt;br/&gt;+ errorsReport(ArrayList&amp;lt;Error&amp;gt;): boolean&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="952" y="4345" width="356" height="158" as="geometry" />
    </mxCell>
    <mxCell id="node3" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Simbols&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- Simbols(Builder): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- Svalue: String&lt;br/&gt;- Fvalue: float&lt;br/&gt;- ASvalue: ArrayList&amp;lt;String&amp;gt;&lt;br/&gt;- name: String&lt;br/&gt;- line: int&lt;br/&gt;- column: int&lt;br/&gt;- type: String&lt;br/&gt;- AFvalue: ArrayList&amp;lt;Float&amp;gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ setAFvalue(ArrayList&amp;lt;Float&amp;gt;): void&lt;br/&gt;+ setName(String): void&lt;br/&gt;+ toString(): String&lt;br/&gt;+ setFvalue(float): void&lt;br/&gt;+ getColumn(): int&lt;br/&gt;+ setASvalue(ArrayList&amp;lt;String&amp;gt;): void&lt;br/&gt;+ getLine(): int&lt;br/&gt;+ getASvalue(): ArrayList&amp;lt;String&amp;gt;&lt;br/&gt;+ setColumn(int): void&lt;br/&gt;+ getName(): String&lt;br/&gt;+ setSvalue(String): void&lt;br/&gt;+ getType(): String&lt;br/&gt;+ setType(String): void&lt;br/&gt;+ getAFvalue(): ArrayList&amp;lt;Float&amp;gt;&lt;br/&gt;+ getSvalue(): String&lt;br/&gt;+ setLine(int): void&lt;br/&gt;+ getFvalue(): float&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="1051" y="3533" width="268" height="641" as="geometry" />
    </mxCell>
    <mxCell id="node2" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Token&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Token(int, int, int, String, String, TokenConstant): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- regularExpression: String&lt;br/&gt;- tokenType: TokenConstant&lt;br/&gt;- lexeme: String&lt;br/&gt;- id: int&lt;br/&gt;- line: int&lt;br/&gt;- column: int&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ getRegularExpression(): String&lt;br/&gt;+ getLine(): int&lt;br/&gt;+ getTokenType(): TokenConstant&lt;br/&gt;+ toString(): String&lt;br/&gt;+ setColumn(int): void&lt;br/&gt;+ setId(int): void&lt;br/&gt;+ setLine(int): void&lt;br/&gt;+ setRegularExpression(String): void&lt;br/&gt;+ setTokenType(TokenConstant): void&lt;br/&gt;+ getLexeme(): String&lt;br/&gt;+ getId(): int&lt;br/&gt;+ setLexeme(String): void&lt;br/&gt;+ getColumn(): int&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="898" y="338" width="359" height="503" as="geometry" />
    </mxCell>
    <mxCell id="node4" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;i&gt;&amp;lt;&amp;lt;enumeration&amp;gt;&amp;gt;&lt;/i&gt;&lt;br/&gt;&lt;b&gt;TokenConstant&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- TokenConstant(): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ COMMA: &lt;br/&gt;+ RPAREN: &lt;br/&gt;+ ESTFUNC: &lt;br/&gt;+ DOUBLECOLON: &lt;br/&gt;+ TITLE: &lt;br/&gt;+ EQUAL: &lt;br/&gt;+ ID: &lt;br/&gt;+ GRAPHTYPE: &lt;br/&gt;+ LPAREN: &lt;br/&gt;+ ERROR: &lt;br/&gt;+ ENDPROGRAM: &lt;br/&gt;+ VALUES: &lt;br/&gt;+ CONSOLE: &lt;br/&gt;+ EXEC: &lt;br/&gt;+ END: &lt;br/&gt;+ NUM: &lt;br/&gt;+ ARR: &lt;br/&gt;+ EJES: &lt;br/&gt;+ RBRACKET: &lt;br/&gt;+ RARROW: &lt;br/&gt;+ COLUMN: &lt;br/&gt;+ EXPRESSION: &lt;br/&gt;+ ARITFUNC: &lt;br/&gt;+ LABEL: &lt;br/&gt;+ COLON: &lt;br/&gt;+ EOF: &lt;br/&gt;+ VAR: &lt;br/&gt;+ LBRACKET: &lt;br/&gt;+ DATATYPE: &lt;br/&gt;+ LARROW: &lt;br/&gt;+ PROGRAM: &lt;br/&gt;+ SEMICOLON: &lt;br/&gt;+ STRING: &lt;br/&gt;+ ARRAY: &lt;br/&gt;+ PRINT: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ values(): TokenConstant[]&lt;br/&gt;+ valueOf(String): TokenConstant&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="327" y="2936" width="243" height="917" as="geometry" />
    </mxCell>
    <mxCell id="node10" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;Tree&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ Tree(String, int, int): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- Ignore: List&amp;lt;String&amp;gt;&lt;br/&gt;- Instruccions: ArrayList&amp;lt;Intruccions&amp;gt;&lt;br/&gt;- column: int&lt;br/&gt;- lexeme: String&lt;br/&gt;- fail: boolean&lt;br/&gt;- line: int&lt;br/&gt;- children: ArrayList&amp;lt;Tree&amp;gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ addChild(Tree): void&lt;br/&gt;+ printInstruccions(): void&lt;br/&gt;+ getInstruccions(Tree): ArrayList&amp;lt;Intruccions&amp;gt;&lt;br/&gt;+ printTree(Tree): void&lt;br/&gt;+ saveTree(Tree): void&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="510" y="919" width="330" height="342" as="geometry" />
    </mxCell>
    <mxCell id="node9" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;flexcup&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;+ flexcup(Reader): &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- zzCurrentPos: int&lt;br/&gt;+ errors: ArrayList&amp;lt;Error&amp;gt;&lt;br/&gt;- zzStartRead: int&lt;br/&gt;- ZZ_NO_MATCH: int&lt;br/&gt;- yyline: int&lt;br/&gt;- yychar: long&lt;br/&gt;+ YYINITIAL: int&lt;br/&gt;- ZZ_ROWMAP: int[]&lt;br/&gt;- ZZ_ROWMAP_PACKED_0: String&lt;br/&gt;~ buffer: StringBuffer&lt;br/&gt;- zzBuffer: char[]&lt;br/&gt;- ZZ_ACTION: int[]&lt;br/&gt;- ZZ_BUFFERSIZE: int&lt;br/&gt;- zzEndRead: int&lt;br/&gt;- zzFinalHighSurrogate: int&lt;br/&gt;+ YYEOF: int&lt;br/&gt;- ZZ_ERROR_MSG: String[]&lt;br/&gt;- ZZ_ATTRIBUTE_PACKED_0: String&lt;br/&gt;- zzEOFDone: boolean&lt;br/&gt;- zzMarkedPos: int&lt;br/&gt;- zzReader: Reader&lt;br/&gt;- zzAtBOL: boolean&lt;br/&gt;- zzAtEOF: boolean&lt;br/&gt;- ZZ_ACTION_PACKED_0: String&lt;br/&gt;- ZZ_CMAP_BLOCKS_PACKED_0: String&lt;br/&gt;- ZZ_TRANS: int[]&lt;br/&gt;- ZZ_PUSHBACK_2BIG: int&lt;br/&gt;- zzLexicalState: int&lt;br/&gt;- ZZ_UNKNOWN_ERROR: int&lt;br/&gt;- ZZ_ATTRIBUTE: int[]&lt;br/&gt;- yycolumn: int&lt;br/&gt;+ tokens: ArrayList&amp;lt;Token&amp;gt;&lt;br/&gt;- zzState: int&lt;br/&gt;- ZZ_LEXSTATE: int[]&lt;br/&gt;- ZZ_TRANS_PACKED_0: String&lt;br/&gt;- ZZ_CMAP_BLOCKS: int[]&lt;br/&gt;- ZZ_CMAP_TOP_PACKED_0: String&lt;br/&gt;- ZZ_CMAP_TOP: int[]&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt;- zzDoEOF(): void&lt;br/&gt;- zzUnpackcmap_blocks(String, int, int[]): int&lt;br/&gt;+ yypushback(int): void&lt;br/&gt;+ yybegin(int): void&lt;br/&gt;- zzScanError(int): void&lt;br/&gt;- yyResetPosition(): void&lt;br/&gt;- zzUnpackAttribute(): int[]&lt;br/&gt;- symbol(int): Symbol&lt;br/&gt;- zzUnpackAction(String, int, int[]): int&lt;br/&gt;- zzCMap(int): int&lt;br/&gt;- zzRefill(): boolean&lt;br/&gt;+ yyclose(): void&lt;br/&gt;+ yyreset(Reader): void&lt;br/&gt;- zzUnpackAction(): int[]&lt;br/&gt;+ yyatEOF(): boolean&lt;br/&gt;- zzMaxBufferLen(): int&lt;br/&gt;+ next_token(): Symbol&lt;br/&gt;- zzUnpacktrans(String, int, int[]): int&lt;br/&gt;- zzUnpackRowMap(): int[]&lt;br/&gt;+ yycharat(int): char&lt;br/&gt;- zzUnpacktrans(): int[]&lt;br/&gt;- zzUnpackcmap_blocks(): int[]&lt;br/&gt;+ yystate(): int&lt;br/&gt;- zzUnpackcmap_top(): int[]&lt;br/&gt;- zzUnpackRowMap(String, int, int[]): int&lt;br/&gt;+ addToken(Token): void&lt;br/&gt;+ yylength(): int&lt;br/&gt;+ yytext(): String&lt;br/&gt;- zzUnpackAttribute(String, int, int[]): int&lt;br/&gt;- zzCanGrow(): boolean&lt;br/&gt;- symbol(int, Object): Symbol&lt;br/&gt;- zzUnpackcmap_top(String, int, int[]): int&lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="950" y="901" width="313" height="1676" as="geometry" />
    </mxCell>
  </root>
</mxGraphModel>